#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;


int main()
{
//№1(сумма четных положительных элементов массива)
    const int size = 10;
    int a[size];
    int i, sum;
    sum = 0;
    
    srand(time(NULL));
    for (i = 0; i < size; i++)
    {
        a[i] = rand() % 20 - 10;
        printf("%d ", a[i]);
    }
    printf("\n");
    
    for (i = 0; i < size; i++)
    {
        if (a[i] >= 0 && a[i]%2 == 0)
        sum += a[i];
    }
    printf("%s%d","Сумма = ", sum);
    
//№2(нахождение максимального элемента с четным индексом)
    const int size = 10;
    int a[size];
    int i, max = 2;
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        a[i] = rand() % 100 + 1;
        printf("%d ", a[i]);
    }
    for (i = 4; i < size; i+=2){
        if (a[i] > a[max])
        max = i;
    }
    printf("\n\n%s%d ","Максимальный элемент с четным индексом: ", a[max]);
    
//№3(нахождение элементов массива, значение которых меньше среднего арифметического, взятого от всех элементов массива)
    const int size = 10;
    int a[size];
    int i, sum = 0, avg;
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        a[i] = rand() % 100 + 1;
        sum += a[i];
        printf("%d ", a[i]);
    }
    
    avg = sum / size;
    printf("\n%s\n", "Числа(о), которые ниже среднего арифметического всех элементов массива:");
    for (i = 0; i < size; i++){
        if (a[i] < avg)
        printf("%d  ", a[i]);
    }
    
//№4(определение двух наименьших элементов массива)
    const int size = 10;
    int a[size];
    int i, min1, min2, buff;
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        a[i] = rand() % 10 - 5;
        printf("%d ", a[i]);
    }
    printf("\n\n");
        
    if (a[0] < a[1]) {
        min1 = 0;
        min2 = 1;
    } else {
        min1 = 1;
        min2 = 0;
    }
    for (i = 2; i < size; i++) {
        if (a[i] < a[min1]) {
            buff = min1;
            min1 = i;
            if (a[buff] < a[min2]) min2 = buff;
        } else {
            if (a[i] < a[min2]) min2 = i;
        }
    }
    
    printf("№%2d:%3d\n",min1+1,a[min1]);
    printf("№%2d:%3d\n",min2+1,a[min2]);
    
//№5(сжатие массива и удаление из него элементов, величина которых находится в интервале [а, b])
    const int size = 10;
    int A[size];
    int i, a, b, k, p;
    
    printf("%s\n", "Введите a, затем b([a, b])");
    scanf("%d%d", &a, &b);
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        A[i] = a + rand() % (b - a);
        printf("%d ", A[i]);
    }
    printf("\n\n");
    
    printf("%s\n", "Удаляемый диапазон[a, b]:");
    scanf("%d%d", &a, &b);
    
    i = 0;
    p = size;
    while (i < p)
    if (A[i] <= b && A[i] >= a) {
        p -= 1;
        for (k = i; k < p; k++)
            A[k] = A[k+1];
    } else
        i += 1;
        
    for (i; i < size; i++)
        A[i] = 0;
    for (i = 0; i < size; i++){
        printf("%d ", A[i]);
    }
    
//№6(сумма модулей элементов массива, расположенных после первого отрицательного элемента)
    const int size = 10;
    int a[size];
    int i, sum = 0;
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        a[i] = rand() % 10 - 5;
        printf("%d ", a[i]);
    }
    printf("\n\n");
    
    for (i = 0; i < size; i++){
        if (a[i] < 0){
            for (i = i+1; i < size; i++){
                sum += abs(a[i]);
            }
        }
    }
    printf("%d  ", sum);
    
//№7(нахождение номера минимального по модулю элемента массива)
    const int size = 10;
    int a[size];
    int i, minabs;
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        a[i] = rand() % 20 - 10;
        printf("%d ", a[i]);
    }
    printf("\n\n");
    
    minabs = 0;
    for (i = 1; i < size; i++)
        if (abs(a[i]) < abs(a[minabs]))
            minabs = i;
    
    printf("%s%d", "Индекс минимального модуля элемента: ", minabs);
    
//№8(сумма всех цифр целочисленного массива)
    const int size = 10;
    int a[size];
    int i, sum, h;
    printf("%s\n", "Введите правую границу интервала[0, x < 1000]");
    scanf("%d", &h);
    
    srand(time(NULL));
    for (i = 0; i < size; i++){
        a[i] = rand() % (h+1);
        printf("%d ", a[i]);
    }
    printf("\n\n");
    
    sum = 0;
    for (i = 0; i < size; i++)
        if ((a[i] / 100) != 0)
            sum += a[i] / 100 + a[i] % 10 + ((a[i] % 100) % 10);
        else if (a[i] / 10 != 0)
            sum += a[i] % 10 + a[i] / 10;
        else sum += a[i] % 10;
    
    printf("%s%d ", "Сумма:", sum);
    
//№9(замена всех элементов массива их квадратами)
    const int n = 4, m = 3;
    int b[n][m];
    int i, j;
    
    srand(time(NULL));
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            b[i][j] = rand() % 10 + 1;
            printf("%d ", b[i][j]);
        }
        printf("\n");
    }
    printf("\n\n");
    
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            b[i][j] *= b[i][j];
            printf("%d ", b[i][j]);
        }
        printf("\n");
    }

//№10(заполнение двумерного массива и вычисление суммы его элементов в каждой строчке, определение максимального значения строчки и ее номера)
    const int n = 4, m = 4;
    int b[n][m];
    int i, j, maxn, maxm, sum, maxsum;
    
    srand(time(NULL));
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            b[i][j] = rand() % 90 + 10;
            printf("%d ", b[i][j]);
        }
        printf("\n");
    }
    
    maxn = 0;
    maxm = 0;
    for (i = 0; i < n; i++) {
        sum = 0;
        for (j = 0; j < m; j++) {
            sum += b[i][j];
            if (b[i][j] > b[maxn][maxm]) {
                b[maxn][maxm] = b[i][j];
            } else if (b[maxn][maxm] < b[maxn][j]) 
                b[maxn][maxm] = b[maxn][j];
        }
        printf("%s %d %s %d\n", "Сумма", i+1, "строки:", sum);
        if (maxsum < sum) {
            maxsum = sum;
        }
    }
    printf("%s%d\n\n", "Максимальная сумма строки: ", maxsum);
    printf("%s%d", "Максимальный элемент матрицы: ", b[maxn][maxm]);
    return 0;
}
